@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

@*chat form*@
<div class="form-group">
    <label>
        User: <input @bind="_userInput"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="_messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

@*show all of our messages*@
<ul>
    @foreach (string message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code
{
    private HubConnection? _hubConnection;
    private List<string> _messages = new();
    private string? _userInput;
    private string? _messageInput;

    protected override async Task OnInitializedAsync()
    {
        // Build (not start) connection to the chat hub
        // The autoconnect by default tries immediately, 2 sec, 5 sec, etc for 5 attempts
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chat"))
            .WithAutomaticReconnect()
            .Build();

        // defined in the hub - this is the client listening for messages from the server
        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            _messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged); // send event that some change occurred
        });

        // try-catch?
        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            // this is the name of the method on the hub server - broadcast this!
            await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
        }
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        // when this page is closed
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
